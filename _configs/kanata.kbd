;; Kanata Keyboard Layout
;; This configuration file allows me to enhance a standard laptop keyboard layout.
;; https://github.com/jtroo/kanata/blob/main/parser/src/keys/mod.rs # key reference
;;
;; [X] Caps lock as escape when tapped, hyper when held
;; [X] Return when held also acts as a hyper key
;; [X] Home row modifiers
;; [X] hold Tab to access Numbers layer
;; [X] hold RMeta to access Navigation layer
;; [X] Add disabled layer
;; [X] Hold Esc for 1s to return to base layer 
;; [X] Fix Fn/Media keys
;; [ ] hold fn to access Function layer
;; [X] hold Space to access Mirror layer
;; [ ] Symbols layer for special characters
;; [X] jump layer to access other layers
;; [X] angle mod
;; [X] repeat key
;; [X] Shortcuts layer

(defcfg
  process-unmapped-keys yes
  log-layer-changes yes
  concurrent-tap-hold yes
  macos-dev-names-include (
    "Apple Internal Keyboard / Trackpad"
  )
)

(defvar
  tap-time 120
  hold-time 180
)

(defalias
  ;; Caps lock as escape when tapped, control when held
  ;;cap (tap-hold 50 200 esc hyper)
  res (tap-hold 50 1000 âˆ… (layer-switch base))

  ;; Accessible Keys
  sbspc (tap-hold-press $tap-time $hold-time bspc lsft)
  sesc (tap-hold-press $tap-time $hold-time esc lsft)
  
  ;; Home row modifiers
  a (tap-hold-release $tap-time $hold-time a lctl)
  s (tap-hold-release $tap-time $hold-time s lalt)
  d (tap-hold-release $tap-time $hold-time d lmet)
  f (tap-hold-release $tap-time $hold-time f lsft)

  j (tap-hold-release $tap-time $hold-time j rsft)
  k (tap-hold-release $tap-time $hold-time k rmet)
  l (tap-hold-release $tap-time $hold-time l lalt)
  ; (tap-hold-release $tap-time $hold-time ; rctl)

  ;; Layer toggle triggers
  jum (tap-hold-release $tap-time $hold-time e (layer-toggle jump))
  num (tap-hold-release $tap-time $hold-time tab (layer-toggle numbers))
  nav (tap-hold-release $tap-time $hold-time rmet (layer-toggle navigation))
  mirr (tap-hold-release $tap-time $hold-time spc (layer-toggle mirror))
  shrt (layer-toggle shortcuts)

  ;; Layer switch triggers
  sbas  (layer-switch base)
  smirr (layer-switch mirror)
  sang  (layer-switch angle)

  ;; Shortcuts layer trigger and Meh key for return
  meh1 (tap-hold-press $tap-time $hold-time esc @shrt)
  meh2 (tap-hold-press $tap-time $hold-time ret (multi lsft lctl lalt))

  ;; Shortcuts layer keys (meh on tap, meh+meta on hold)
  s1 (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt 1) (multi lsft lctl lalt lmet 1))
  s2 (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt 2) (multi lsft lctl lalt lmet 2))
  s3 (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt 3) (multi lsft lctl lalt lmet 3))
  s4 (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt 4) (multi lsft lctl lalt lmet 4))
  s5 (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt 5) (multi lsft lctl lalt lmet 5))
  s6 (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt 6) (multi lsft lctl lalt lmet 6))
  s7 (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt 7) (multi lsft lctl lalt lmet 7))
  s8 (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt 8) (multi lsft lctl lalt lmet 8))
  s9 (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt 9) (multi lsft lctl lalt lmet 9))
  s0 (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt 0) (multi lsft lctl lalt lmet 0))
  sq (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt q) (multi lsft lctl lalt lmet q))
  sw (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt w) (multi lsft lctl lalt lmet w))
  se (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt e) (multi lsft lctl lalt lmet e))
  sr (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt r) (multi lsft lctl lalt lmet r))
  st (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt t) (multi lsft lctl lalt lmet t))
  sy (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt y) (multi lsft lctl lalt lmet y))
  su (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt u) (multi lsft lctl lalt lmet u))
  si (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt i) (multi lsft lctl lalt lmet i))
  so (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt o) (multi lsft lctl lalt lmet o))
  sp (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt p) (multi lsft lctl lalt lmet p))
  sa (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt a) (multi lsft lctl lalt lmet a))
  ss (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt s) (multi lsft lctl lalt lmet s))
  sd (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt d) (multi lsft lctl lalt lmet d))
  sf (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt f) (multi lsft lctl lalt lmet f))
  sg (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt g) (multi lsft lctl lalt lmet g))
  sh (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt h) (multi lsft lctl lalt lmet h))
  sj (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt j) (multi lsft lctl lalt lmet j))
  sk (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt k) (multi lsft lctl lalt lmet k))
  sl (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt l) (multi lsft lctl lalt lmet l))
  sz (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt z) (multi lsft lctl lalt lmet z))
  sx (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt x) (multi lsft lctl lalt lmet x))
  sc (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt c) (multi lsft lctl lalt lmet c))
  sv (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt v) (multi lsft lctl lalt lmet v))
  sb (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt b) (multi lsft lctl lalt lmet b))
  sn (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt n) (multi lsft lctl lalt lmet n))
  sm (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt m) (multi lsft lctl lalt lmet m))
  scomma (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt ,) (multi lsft lctl lalt lmet ,))
  sdot (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt .) (multi lsft lctl lalt lmet .))
  sspc (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt spc) (multi lsft lctl lalt lmet spc))
  sret (tap-hold-press $tap-time $hold-time (multi lsft lctl lalt ret) (multi lsft lctl lalt lmet ret))

  ;; Specialty keys
  pwrd (tap-hold-press $tap-time $hold-time (multi lalt left) (multi lmet left))
  nwrd (tap-hold-press $tap-time $hold-time (multi lalt right) (multi lmet right))
  mrpt (tap-hold-release $tap-time $hold-time rpt lmet)

)


(defsrc
  esc    f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  grv  1    2    3    4    5    6    7    8    9    0   -    =    bspc
  tab   q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps   a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft    z    x    c    v    b    n    m    ,    .    /    rsft
    lctl lalt lmet           spc             rmet ralt left down up   rght
)

(deflayer base
  _    brdn bru  mctl  sls  dtn  dnd  prev  pp next mute  vold  volu
  _    _    _    _    _    _    _    _    _    _    _   _    _    _
  @num  _    _  @jum   _    _    _    _    _    _    _    _    _    _
  @meh1  @a    @s   @d   @f   _    _    @j   @k   @l   @;   _    @meh2
  @sbspc   _    _    _    _    _    _    _    _    _    _    @sbspc
    _    _   @mrpt         @mirr           @nav   _    _    _    _    _
)

;; Jump layer is used to access the jump keys, which are used to quickly switch between layers.
(deflayer jump
 @sbas   _    _    _    _    _    _    _    _    _    _    _    _         ;; Function keys
 @sbas _    _    _    _    _    _    _    _    _    _   _    _    _       ;; Numbers
  _     _    _    _    _    _    _    _    _    _    _    _    _    _     ;; Top row
  _      _    _    _    _    _    _    _    _    _    _    _    _         ;; Home row
 @sang    _    _    _    _    _    _    _    _    _    _    _             ;; Bottom row
    _    _    _           @smirr             _    _    _    _    _    _   ;; Modifiers Row
)

(deflayer angle
  _    brdn bru  mctl  sls  dtn  dnd  prev  pp next mute  vold  volu
  _    _    _    _    _    _    _    _    _    _    _   _    _    _
  @num  _    _  @jum   _    _    _    _    _    _    _    _    _    _
  @meh1  @a    @s   @d   @f   _    _    @j   @k   @l   @;   _    @meh2
    z     x    c    v    b    _    _    _    _    _    _    @sbspc
    _    _    _            @mirr           @nav   _    _    _    _    _
)

;; Numbers layer is used to access the number keys, which is using a numpad layout.
(deflayer numbers
  _      _    _    _    _    _    _    _    _    _    _    _    _         ;; Function keys
  _    _    _    _    _    _    _   del   =    /    kp* _    _    _       ;; Numbers
  _     _    _    _    _    _    _    7    8    9    -    _    _    _     ;; Top row
  _      _    _    _    _    _    _    4    5    6    +    _    _         ;; Home row
  _       _    _    _    _    _    _    1    2    3   ret   _             ;; Bottom row
    _    _    _              0               _    .    _    _    _    _   ;; Modifiers Row
)

;; Navigation layer is used to access the arrow keys and other navigation keys.
(deflayer navigation
  _      _    _    _    _    _    _    _    _    _    _    _    _         ;; Function keys
  _    _    _    _    _    _    _    _    _    _    _   _    _    _       ;; Numbers
  _     _    _    _    _    _    _   @pwrd up @nwrd pgup  _    _    _     ;; Top row 
  _      _    _    _    _    _    _   left down rght pgdn  _    _         ;; Home row
  _       _    _    _    _    _    _    _    _    _    _    _             ;; Bottom row
    _    _    _              _               _    _    _    _    _    _   ;; Modifiers Row
)

;; Shortcuts layer is used to send Shift+Ctrl+Alt+key on tap and Shift+Ctrl+Alt+Meta+key on hold.
;; This layer is activated by holding the Esc key.
(deflayer shortcuts
  _      _    _    _    _    _    _    _    _    _    _    _    _         ;; Function keys
  _    @s1  @s2  @s3  @s4  @s5  @s6  @s7  @s8  @s9  @s0  _    _    _   ;; Numbers
  _     @sq  @sw  @se  @sr  @st  @sy  @su  @si  @so  @sp  _    _    _   ;; Top row
  _      @sa  @ss  @sd  @sf  @sg  @sh  @sj  @sk  @sl  _    _    @sret   ;; Home row
  _       @sz  @sx  @sc  @sv  @sb  @sn  @sm  @scomma @sdot _    _       ;; Bottom row
    _    _    _              @sspc           _    _    _    _    _    _   ;; Modifiers Row
)

;; Mirror layer is used to mirror the keyboard, allowing one hand to type the opposite side.
;; This is useful when one hand is injured or when one hand is busy with the mouse/trackpad.
(deflayer mirror
  @res   _    _    _    _    _    _    _    _    _    _    _    _         ;; Function keys
  bspc  -   0    9    8    7    6    5    4    3    2   1    _   grv      ;; Numbers
  \     p    o    i    u    y    t    r    e    w    q    _    _   tab    ;; Top row
  ret    ;    l    k    j    h    g    f    d    s    a    _    _         ;; Home row
  /       .    ,    m    n    b    v    c    x    z    _    _             ;; Bottom row
    _    _    _              _               _    _    _    _    _    _   ;; Modifiers Row
)

;; Disable layer is used to disable the keyboard, preventing any key presses from being registered.
;; This is useful if you have an external keyboard and want to place it on top of the internal 
;; keyboard, or if you want to secure your laptop by disabling the keyboard when not in use.
(deflayer disabled
  @res   âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…
  âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…   âˆ…    âˆ…    âˆ…
  âˆ…     âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…
  âˆ…      âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…
  âˆ…       âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…
    âˆ…    âˆ…    âˆ…              âˆ…               âˆ…    âˆ…    âˆ…    âˆ…    âˆ…    âˆ…
)

(defchordsv2
  ;;(caps tab)  (layer-switch splitcolemak) 300 all-released ()
  (esc caps) (layer-switch disabled) 300 all-released ()
)

#|
(deflayer layerX
  _      _    _    _    _    _    _    _    _    _    _    _    _         ;; Function keys
  _    _    _    _    _    _    _    _    _    _    _   _    _    _       ;; Numbers
  _     _    _    _    _    _    _    _    _    _    _    _    _    _     ;; Top row
  _      _    _    _    _    _    _    _    _    _    _    _    _         ;; Home row
  _       _    _    _    _    _    _    _    _    _    _    _             ;; Bottom row
    _    _    _              _               _    _    _    _    _    _   ;; Modifiers Row
)
|#